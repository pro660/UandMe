// src/api/userStore.js
import { create } from "zustand";
import { persist } from "zustand/middleware";

const useUserStore = create(
  persist(
    (set, get) => ({
      user: null, // { accessToken, ... } Ìè¨Ìï®
      jwt: null,
      firebaseCustomToken: null,
      isInitialized: false,

      // ‚úÖ Í∞ùÏ≤¥ ÎòêÎäî Ìï®Ïàò(updater) Î™®Îëê ÌóàÏö©
      setUser: (userOrUpdater) => {
        if (typeof userOrUpdater === "function") {
          set((state) => {
            const prev = state.user || {};
            const next = userOrUpdater(prev) || {};
            console.log("üü¢ [UserStore] setUser (updater):", next);
            return { user: next };
          });
        } else {
          console.log("üü¢ [UserStore] setUser (replace):", userOrUpdater);
          set({ user: userOrUpdater });
        }
      },

      // Î∂ÄÎ∂Ñ Î≥ëÌï©
      updateUser: (patch) => {
        const prev = get().user || {};
        const next = { ...prev, ...patch };
        console.log("üü¢ [UserStore] updateUser (merge):", patch, "=>", next);
        set({ user: next });
      },

      // ‚úÖ accessTokenÎßå ÍµêÏ≤¥(Î¶¨ÌîÑÎ†àÏãúÏóêÏÑú ÏÇ¨Ïö©)
      setAccessToken: (accessToken) => {
        const prev = get().user || {};
        const next = { ...prev, accessToken };
        console.log("üü¢ [UserStore] setAccessToken:", !!accessToken);
        set({ user: next });
      },

      // ÌÅ¨Î†àÎîß Ï†ÑÏö©
      updateCredits: ({ matchCredits, signalCredits }) => {
        const prev = get().user || {};
        const next = {
          ...prev,
          matchCredits:
            matchCredits !== undefined ? matchCredits : prev.matchCredits,
          signalCredits:
            signalCredits !== undefined ? signalCredits : prev.signalCredits,
        };
        console.log(
          "üü¢ [UserStore] updateCredits:",
          { matchCredits, signalCredits },
          "=>",
          next
        );
        set({ user: next });
      },

      setJwt: (jwt) => {
        console.log("üü¢ [UserStore] setJwt:", !!jwt);
        set({ jwt });
      },
      setFirebaseCustomToken: (firebaseCustomToken) => {
        console.log(
          "üü¢ [UserStore] setFirebaseCustomToken:",
          !!firebaseCustomToken
        );
        set({ firebaseCustomToken });
      },

      clearUser: () => {
        console.log("üî¥ [UserStore] clearUser");
        set({ user: null, jwt: null, firebaseCustomToken: null });
      },
      logout: () => {
        console.log("üî¥ [UserStore] logout");
        set({ user: null, jwt: null, firebaseCustomToken: null });
      },

      setInitialized: (value) => {
        console.log("‚öôÔ∏è [UserStore] setInitialized:", value);
        set({ isInitialized: value });
      },
    }),
    {
      name: "user-storage",
    }
  )
);

export default useUserStore;
